#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/029c0cc5-e325-4b17-b7c6-507456965089 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float lat;
  float lon;
  int bpm;
  int ecg;
  int oxi;
  CloudLocation destination;
  bool blue;
  bool button;
  bool green;
  bool red;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//#########################################################################################
#include "DFRobot_BloodOxygen_S.h"

#define I2C_COMMUNICATION  //use I2C for communication, but use the serial port for communication if the line of codes were masked

#ifdef  I2C_COMMUNICATION
#define I2C_ADDRESS    0x57
  DFRobot_BloodOxygen_S_I2C MAX30102(&Wire ,I2C_ADDRESS);
#else


#if defined(ARDUINO_AVR_UNO) || defined(ESP32)
SoftwareSerial mySerial(D2, D3);  // SoftwareSerial mySerial(4, 5);
DFRobot_BloodOxygen_S_SoftWareUart MAX30102(&mySerial, 9600);

#else
DFRobot_BloodOxygen_S_HardWareUart MAX30102(&Serial1, 9600); 
#endif
#endif

//****************
const int heartPin = A7;
//#########################################################################################
const int R = 14;
const int G = 15;
const int B = 16;




void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  
  //###############################################################
  while (false == MAX30102.begin())
  {
    Serial.println("init fail!");
    delay(1000);
  }
  Serial.println("init success!");
  Serial.println("start measuring...");
  MAX30102.sensorStartCollect();
  
  //###############################################################
  pinMode(R, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(B, OUTPUT);
  
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  MAX30102.getHeartbeatSPO2();
  
  bpm = MAX30102._sHeartbeatSPO2.Heartbeat;
  oxi = MAX30102._sHeartbeatSPO2.SPO2;
  
}



/*
  Since Button is READ_WRITE variable, onButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
unsigned short int bufferheart[300];

void onButtonChange(){
  int i = 0;
  int j = 0;
  while(i < 250){
    bufferheart[i] = analogRead(heartPin);
    i++;
    delay(4);
  }
  while(j < 250){
    
    ecg = bufferheart[j];
    bufferheart[j] = 0;
    j++;
    delay(50);
  }
  
  
}



/*
  Since Red is READ_WRITE variable, onRedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedChange()  {
  // Add your code here to act upon Red change
  setColor(255, 0, 0); // Red Color
}

/*
  Since Green is READ_WRITE variable, onGreenChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGreenChange()  {
  // Add your code here to act upon Green change
  setColor(0,  255, 0);
}

/*
  Since Blue is READ_WRITE variable, onBlueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBlueChange()  {
  // Add your code here to act upon Blue change
  setColor(0, 0, 255);
}


void setColor(int redValue, int greenValue,  int blueValue) {
  analogWrite(R, redValue);
  analogWrite(G,  greenValue);
  analogWrite(B, blueValue);
}






/*
  Since Lat is READ_WRITE variable, onLatChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLatChange()  {
  // Add your code here to act upon Lat change
  destination = {lat, lon};
}

/*
  Since Lon is READ_WRITE variable, onLonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLonChange()  {
  // Add your code here to act upon Lon change
  destination = {lat, lon};
}